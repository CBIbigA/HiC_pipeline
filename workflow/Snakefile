

import math
import pandas as pd

configfile:"config/config.yaml"


SAMPLES = config["general"]["samples"]
INDIR=config["general"]["samplein"]
OUTDIR=config["general"]["sampleout"]

GENOME=config["genome"]["dir"]+config["genome"]["name"]
EXT=config["raw_spec"]["ext"]
R1=config["raw_spec"]["pairs_ext"][0]
R2=config["raw_spec"]["pairs_ext"][1]




if config["general"]["rm_duplicates"]:
	outpair="dedup"
else:
	outpair="filtered"


wildcard_constraints:
	dataset=config["raw_spec"]["pairs_expr"]


rule all:
	input:
		expand(OUTDIR+"mapping/matrix/{prefix}."+outpair+".{type}",prefix=SAMPLES,type=["mcool","hic"])


rule makeChromSize:
	input:
		fasta=GENOME+config["genome"]["ext"]
	output:
		chromsize=OUTDIR+"chrom.size",
		fai=GENOME+".fa.fai"
	benchmark:
		OUTDIR+"benchmark/makeChromSize.txt"
	conda: "envs/pipeline.yaml"
	shell:
		"samtools faidx {input.fasta} -o {output.fai} && cut -f1,2 {output.fai} > {output.chromsize}"


def getFastQ(wildcards):
	fastq_list = expand(INDIR+"{sample}{dataset}{ext}",dataset=[R1,R2],sample = wildcards.prefix,ext=EXT)
	return fastq_list

rule bwa_mem:
	input:
		getFastQ
	output:
		mapped=temp(OUTDIR+"mapping/bwa/{prefix}.sam")
	params:
		index=GENOME+".fa"
	benchmark:
		OUTDIR+"benchmark/{prefix}/bwa_mem.txt"
	threads:config["general"]["threads"]["aln"]
	conda: "envs/pipeline.yaml"
	shell:
		"bwa mem -5SPM -t {threads} {params.index} {input} > {output}"


rule samtools_sam_to_bam:
	input:
		OUTDIR+"mapping/bwa/{prefix}.sam"
	output:
		OUTDIR+"mapping/bwa/{prefix}.bam"
	benchmark:
		OUTDIR+"benchmark/{prefix}/samtools_sam_to_bam.txt"
	threads:config["general"]["threads"]["aln"]
	conda: "envs/pipeline.yaml"
	shell:
		"samtools view -@ {threads} -Shb {input} > {output}"


rule pairtools_parse:
	input:
		chromsize=OUTDIR+"chrom.size",
		bam=OUTDIR+"mapping/bwa/{prefix}.bam"
	output:
		pairsam=temp(OUTDIR+"mapping/pairtools/{prefix}.pairsam"),
		stats=OUTDIR+"mapping/pairtools/{prefix}.pairsamstats"
	threads:config["general"]["threads"]["pairtools"]
	params:threads=int(math.ceil(config["general"]["threads"]["pairtools"]/2))
	conda: "envs/pipeline.yaml"
	benchmark:
		OUTDIR+"benchmark/{prefix}/pairtools_parse.txt"
	shell:
		"pairtools parse --min-mapq 40 --walks-policy all --max-inter-align-gap 30 --output-stats {output.stats} -c {input.chromsize} --add-columns mapq --nproc-in {params.threads} --nproc-out {params.threads} {input.bam} > {output.pairsam}"




rule pairtools_sort:
	input:
		OUTDIR+"mapping/pairtools/{prefix}.pairsam"
	output:
		temp(OUTDIR+"mapping/pairtools/{prefix}.sorted.pairsam")
	threads:config["general"]["threads"]["pairtools"]
	benchmark: OUTDIR+"benchmark/{prefix}/pairtools_sort.txt"
	resources:
		tmpdir="tmp"
	conda: "envs/pipeline.yaml"
	shell:
		"pairtools sort --nproc {threads} -o {output} {input}"

rule pairtools_select:
	input:
		pairsam=OUTDIR+"mapping/pairtools/{prefix}.sorted.pairsam"
	output:
		selected=temp(OUTDIR+"mapping/pairtools/{prefix}.filtered.pairsam"),
		dropped=OUTDIR+"mapping/pairtools/{prefix}_dropped.pairsam"
	threads:config["general"]["threads"]["pairtools"]
	params:
		threads=int(math.ceil(config["general"]["threads"]["pairtools"]/2)),
		filters="'(pair_type == \"UU\") or (pair_type == \"UR\") or (pair_type == \"RU\")'"
	benchmark:
		OUTDIR+"benchmark/{prefix}/pairtools_filter.txt"
	conda: "envs/pipeline.yaml"
	shell:
		"pairtools select --nproc-in {params.threads} --nproc-out {params.threads} --output-rest {output.dropped} {params.filters} {input} > {output.selected}"

rule pairtools_dedup:
	input:
		OUTDIR+"mapping/pairtools/{prefix}.filtered.pairsam"
	output:
		pairsam=temp(OUTDIR+"mapping/pairtools/{prefix}.dedup.pairsam"),
		stat=OUTDIR+"mapping/pairtools/{prefix}_dedup.pairstats"
	threads:config["general"]["threads"]["pairtools"]
	params:threads=int(math.ceil(config["general"]["threads"]["pairtools"]/2))
	conda: "envs/pipeline.yaml"
	benchmark:
		OUTDIR+"benchmark/{prefix}/pairtools_dedup.txt"
	shell:
		"pairtools dedup --nproc-in {params.threads} --nproc-out {params.threads} --mark-dups --output-stats {output.stat} --output {output.pairsam} {input}"


rule pairtools_split:
	input:
		OUTDIR+"mapping/pairtools/{prefix}."+outpair+".pairsam"
	output:
		pairs=OUTDIR+"mapping/pairtools/{prefix}."+outpair+".pairs",
		bam=temp(OUTDIR+"mapping/pairtools/{prefix}."+outpair+".bam")
	threads:config["general"]["threads"]["pairtools"]
	params:threads=int(math.ceil(config["general"]["threads"]["pairtools"]/2))
	conda: "envs/pipeline.yaml"
	benchmark:
		OUTDIR+"benchmark/{prefix}/pairtools_split.txt"
	shell:
		"pairtools split --nproc-in {params.threads} --nproc-out {params.threads} --output-pairs {output.pairs} --output-sam {output.bam} {input}"

rule samtools_sort:
	input:
		OUTDIR+"mapping/pairtools/{prefix}."+outpair+".bam"
	output:
		OUTDIR+"mapping/pairtools/{prefix}."+outpair+"_sorted.bam"
	threads:config["general"]["threads"]["pairtools"]
	conda: "envs/pipeline.yaml"
	benchmark:
		OUTDIR+"benchmark/{prefix}/samtools."+outpair+"_sort.txt"
	shell:
		"samtools sort -@{threads} -o {output} {input}"

rule samtools_index:
	input:
		OUTDIR+"mapping/pairtools/{prefix}."+outpair+"_sorted.bam"
	output:
		OUTDIR+"mapping/pairtools/{prefix}."+outpair+"_sorted.bai"
	threads:config["general"]["threads"]["pairtools"]
	conda: "envs/pipeline.yaml"
	benchmark:
		OUTDIR+"benchmark/{prefix}/samtools_index."+outpair+".txt"
	shell:
		"samtools index -@ {threads} {input} {output}"

rule juicer_hic:
	input:
		pairs=OUTDIR+"mapping/pairtools/{prefix}."+outpair+".pairs",
		chromsize=OUTDIR+"chrom.size"
	output:
		OUTDIR+"mapping/matrix/{prefix}."+outpair+".hic"
	params:
		juicer_tool="workflow/scripts/juicer_tools_1.22.01.jar",
		norm="VC,VC_SQRT,KR,SCALE",
		resolutions=config["juicer"]["resolutions"]
	resources:
		mem_mb=lambda wildcards, threads: 3584 * threads
	threads:config["general"]["threads"]["matrix"]
	conda: "envs/pipeline.yaml"
	benchmark:
		OUTDIR+"benchmark/{prefix}/juicer_hic."+outpair+".txt"
	shell:
		"java -Djava.awt.headless=true -Ddevelopment=false -Xmx{resources.mem_mb}M -jar {params.juicer_tool} pre -r {params.resolutions} -k {params.norm} --threads {threads} {input.pairs} {output} {input.chromsize}"

rule bgzip:
	input:
		pairs=OUTDIR+"mapping/pairtools/{prefix}."+outpair+".pairs"
	output:
		temp(OUTDIR+"mapping/pairtools/{prefix}."+outpair+".pairs.gz")
	benchmark:
		OUTDIR+"benchmark/{prefix}/bgzip."+outpair+".txt"
	threads:config["general"]["threads"]["matrix"]
	conda: "envs/pipeline.yaml"
	shell:
		"bgzip --threads {threads} -c {input.pairs} > {output}"

rule pairix:
	input:
		pairs=OUTDIR+"mapping/pairtools/{prefix}."+outpair+".pairs.gz"
	output:
		OUTDIR+"mapping/pairtools/{prefix}."+outpair+".pairs.gz.px2"
	threads:config["general"]["threads"]["matrix"]
	conda: "envs/pipeline.yaml"
	benchmark:
		OUTDIR+"benchmark/{prefix}/pairix."+outpair+".txt"
	shell:
		"pairix {input.pairs}"

rule cooler:
	input:
		chromsize=OUTDIR+"chrom.size",
		pairix=OUTDIR+"mapping/pairtools/{prefix}."+outpair+".pairs.gz.px2",
		pairs=OUTDIR+"mapping/pairtools/{prefix}."+outpair+".pairs.gz"
	output:
		cool=OUTDIR+"mapping/matrix/{prefix}."+outpair+".cool"
	threads:config["general"]["threads"]["matrix"]
	conda: "envs/pipeline.yaml"
	params:
		minres=config["cooler"]["minres"]
	benchmark:
		OUTDIR+"benchmark/{prefix}/cooler."+outpair+".txt"
	shell:
		"cooler cload pairix -p {threads} {input.chromsize}:{params.minres} {input.pairs} {output.cool}"


rule mcooler:
	input:
		cool=OUTDIR+"mapping/matrix/{prefix}."+outpair+".cool"
	output:
		mcool=OUTDIR+"mapping/matrix/{prefix}."+outpair+".mcool"
	benchmark:
		OUTDIR+"benchmark/{prefix}/mcooler."+outpair+".txt"
	threads:config["general"]["threads"]["matrix"]
	conda: "envs/pipeline.yaml"
	params:
		resolutions=config["cooler"]["resolutions"],
		options=config["cooler"]["options"]
	shell:
		"cooler zoomify {params.options} -p {threads} -r {params.resolutions} {input}"
